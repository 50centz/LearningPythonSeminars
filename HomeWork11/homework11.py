# -*- coding: utf-8 -*-
"""HomeWork11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vLXFt-br3xBtT9sH-lZr9bT4xnI7Q0vk

f(x) = -12*x\**4*sin(cos(x)) - 18*x\**3+5*x\**2 + 10*x - 30

Определить корни

Найти интервалы, на которых функция возрастает

Найти интервалы, на которых функция убывает

Построить график

Вычислить вершину

Определить промежутки, на котором f > 0

Определить промежутки, на котором f < 0
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-3, 3, 0.1)

a, b, c, d, e = -12, -18, 5, 10, -30

def func(a, b, c, d, e, x):
  return a*x**4*np.sin(np.cos(x))+b*x**3+c*x**2+d*x+e

"""Построить график"""

#Корни
x1list = func(a, b, c, d, e, x)
def x1():
  count = -3
  list_x = []
  for i in x1list:
    list_x.append(i)
    count += 0.1
    if i < 0:
      y = i
      return count, y, list_x
      break

x1 = x1()
c0 = round(x1[0], 2)
c1 = round(x1[1], 2)
c5 = x1[2]

print(c0, c1)

count_y = 0
for i in x1list:
  count_y += 1
  if i < 0:
    break

def x2(count_y, c0):
  for i in range(count_y, len(x1list)):
    c0 += 0.1 
    if x1list[i] > 0:
      z = x1list[i]
      return z, c0
      break

x2 = x2(count_y, c0)
c3 = round(x2[0], 2)
c2 = x2[1] - 0.1
c4 = round(c2, 2)

print(c3, c4)

min_y = min(func(a, b, c, d, e, x))
min_y = round(min_y, 2)

def min_x(x1list):
  count_min_x = -3
  for i in x1list:
    count_min_x += 0.1
    if i == -74.10623434395417:
      return count_min_x
      break

min_x1 = min_x(x1list) - 0.1
min_x = round(min_x1, 2)

pos_down = np.arange(-3, c0, 0.10)
neg_down = np.arange(c0, min_x, 0.10)
neg_up = np.arange(min_x, c4, 0.10)
pos_up = np.arange(c4, 3, 0.10)

#График
#plt.plot(x, func(a, b, c, d , e, x), 'b-')

#Корни
plt.plot(c0, c1, 'go', label = f'Корни ({c0}, {c4})')
plt.plot(c4, c3, 'go')

#вершина
plt.plot(min_x, min_y, 'rx', label = f'Вершина({min_x}, {min_y})')

#pos_down

plt.plot(pos_down, func(a, b, c, d, e, pos_down) , 'b-', label = 'Убывает > 0')

#neg_down

plt.plot(neg_down, func(a, b, c, d, e, neg_down), 'y-.', label = 'Убывает < 0')

#neg_up

plt.plot(neg_up, func(a, b, c, d, e, neg_up), 'r-.', label = 'Возрастает < 0')

#pos_up

plt.plot(pos_up, func(a, b, c, d, e, pos_up), 'g-', label = 'Возрастает > 0')

plt.legend()
plt.grid()